"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _saga = require("./saga");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const commandPath = {
  build: 'build-or-watch',
  watch: 'build-or-watch',
  init: 'init',
  deploy: 'deploy',
  schema: 'schema',
  status: 'status'
};

function _default(_x, _x2, _x3) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator(function* (command, params, cli) {
    const path = commandPath[command];

    if (path) {
      const fn = require(`./commands/${path}`).default;

      const result = fn(command, params);
      yield (0, _saga.isGenerator)(result) ? (0, _saga.runSaga)(result) : result;
    } else {
      console.log('No such command:' + cli.help);
    }
  });
  return _ref.apply(this, arguments);
}