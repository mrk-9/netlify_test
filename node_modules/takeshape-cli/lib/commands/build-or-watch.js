"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildHandler = buildHandler;
exports.default = void 0;

var _takeshapeSsg = require("takeshape-ssg");

var _files = require("../files");

var _pusher = require("../util/pusher");

var _linkedCommand = _interopRequireDefault(require("../util/linked-command"));

var _connector = require("../util/connector");

var _runner = require("../util/runner");

var _watcher = require("../util/watcher");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function buildHandler(config, connector) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (clearCache) {
        if (clearCache && connector.clearCache) {
          yield connector.clearCache();
        }

        const pages = yield (0, _takeshapeSsg.generate)(config, connector);
        return (0, _files.writePages)(config.buildPath)(pages);
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}

var _default = (0, _linkedCommand.default)(
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(function* (command, params) {
    const config = (0, _takeshapeSsg.loadConfig)(params.configFilePath, {
      env: process.env
    });
    const connector = (0, _connector.createConnector)(params, {
      cache: params.cache
    });
    const build = (0, _runner.createRunner)('tsg build', buildHandler(config, connector));
    yield Promise.all([build(false), (0, _files.copyStatic)(config)]);

    if (command === 'watch') {
      (0, _watcher.createWatcher)('templates', build.bind(null, false), config.templatePath);
      (0, _watcher.createWatcher)('static', (0, _files.syncStatic)(config), config.staticPath);

      if (params.watchContent) {
        yield (0, _pusher.subscribe)(params, build.bind(null, true));
      }
    }
  });

  return function (_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}());

exports.default = _default;