"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUploadUrl = getUploadUrl;
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _request = _interopRequireDefault(require("request"));

var _path = _interopRequireDefault(require("path"));

var _archiver = _interopRequireDefault(require("archiver"));

var _streamToPromise = _interopRequireDefault(require("stream-to-promise"));

var _chalk = _interopRequireDefault(require("chalk"));

var _glob = _interopRequireDefault(require("glob"));

var _takeshapeSsg = require("takeshape-ssg");

var _api = _interopRequireDefault(require("../util/api"));

var _linkedCommand = _interopRequireDefault(require("../util/linked-command"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getUploadUrl(_x) {
  return _getUploadUrl.apply(this, arguments);
}

function _getUploadUrl() {
  _getUploadUrl = _asyncToGenerator(function* (params) {
    try {
      const {
        uploadUrl
      } = yield (0, _api.default)(params, 'GET', `/project/${params.projectId}/ssg/${params.siteId}/upload-url`);
      return uploadUrl;
    } catch (e) {
      throw new Error(`Failed to get upload url: ${e.message}`);
    }
  });
  return _getUploadUrl.apply(this, arguments);
}

var _default = (0, _linkedCommand.default)((command, params) => {
  if (!params.siteId) {
    console.error('Error: no site selected. Please run `tsg init`.');
    process.exit(1);
  }

  const config = (0, _takeshapeSsg.loadConfig)(params.configFilePath, params.buildPath);

  const zipPath = _path.default.join(config.cwd, '__build.zip');

  const output = _fsExtra.default.createWriteStream(zipPath);

  const archive = (0, _archiver.default)('zip');
  archive.pipe(output);
  archive.file(config.configFilePath, {
    name: 'tsg.yml'
  });
  archive.directory(config.staticPath, _path.default.relative(config.cwd, config.staticPath));
  archive.directory(config.templatePath, _path.default.relative(config.cwd, config.templatePath));
  archive.finalize();

  _bluebird.default.all([getUploadUrl(params), (0, _streamToPromise.default)(output)]).then(results => {
    const uploadUrl = results[0];

    const stats = _fsExtra.default.statSync(zipPath);

    const putStream = (0, _request.default)({
      method: 'PUT',
      url: uploadUrl,
      headers: {
        'Content-Length': stats.size
      }
    });

    _fsExtra.default.createReadStream(zipPath).pipe(putStream);

    (0, _streamToPromise.default)(putStream);
    return stats.size;
  }).then(size => {
    console.log(_chalk.default.green('Site was successfully deployed!'));
    console.log(`Deploy Target: ${_chalk.default.green(params.siteName)}`);
    console.log(`Deploy Size: ${_chalk.default.green(`${size / 1000000.0} MB`)}`);

    const staticFiles = _glob.default.sync(`${config.staticPath}/**/*.*`);

    const templateFiles = _glob.default.sync(`${config.templatePath}/**/*.*`);

    console.log(`Files Deployed: ${_chalk.default.green(staticFiles.length + templateFiles.length)}`);

    _fsExtra.default.unlinkSync(zipPath);
  }).catch(e => {
    console.error('An error occurred with deploying - ', e);
    process.exit(1);
  });
});

exports.default = _default;