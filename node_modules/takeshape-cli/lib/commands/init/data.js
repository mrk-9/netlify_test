"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchProjects = fetchProjects;
exports.fetchSites = fetchSites;
exports.laterSite = exports.siteListQuery = exports.projectListQuery = void 0;

var _saga = require("../../saga");

var _graphql = require("../../graphql");

var _errors = require("../../errors");

const projectListQuery = `
    {
       projects: tsGetProjectList {
          value: id
          name
          invite
        }
    }
`;
exports.projectListQuery = projectListQuery;
const siteListQuery = `
    {
       sites: getTsStaticSiteList {
          items {
            value: _id
            name: title
          }
        }
    }
`;
exports.siteListQuery = siteListQuery;

function* fetchProjects(params, authToken) {
  try {
    const client = yield (0, _saga.call)(_graphql.createConnector, params, authToken);
    const {
      data
    } = yield (0, _saga.call)(client, {
      query: projectListQuery
    });
    return data.projects.filter(p => p.invite === null);
  } catch (e) {
    (0, _errors.handleHttpErrors)(e, 'fetching your projects');
  }
}

const laterSite = {
  name: 'Select site later',
  value: undefined
};
exports.laterSite = laterSite;

function* fetchSites(params, authToken, projectId) {
  try {
    const client = yield (0, _saga.call)(_graphql.createConnector, params, authToken, projectId);
    const {
      data
    } = yield (0, _saga.call)(client, {
      query: siteListQuery
    });
    const sites = data.sites.items;
    return sites.length ? sites.concat([laterSite]) : sites;
  } catch (e) {
    (0, _errors.handleHttpErrors)(e, 'fetching your static sites');
  }
}