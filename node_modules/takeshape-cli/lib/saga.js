"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.call = call;
exports.all = all;
exports.isGenerator = isGenerator;
exports.runSaga = runSaga;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function call(fn, ...args) {
  return {
    type: 'CALL',
    fn,
    args
  };
}

function all(effects) {
  return {
    type: 'ALL',
    effects
  };
}

function isGenerator(obj) {
  return obj && typeof obj.next === 'function' && typeof obj.throw === 'function';
}

const handlers = {
  CALL(effect) {
    return _asyncToGenerator(function* () {
      const value = effect.fn.apply(null, effect.args);

      if (isGenerator(value)) {
        return runSaga(value); // eslint-disable-line @typescript-eslint/no-use-before-define
      }

      return value;
    })();
  },

  ALL(effect) {
    return Promise.all(effect.effects.map(childEffect => {
      if (handlers[childEffect.type]) {
        return handlers[childEffect.type](childEffect);
      }

      throw new Error('Unhandled Effect');
    }));
  }

};

function runSaga(_x, _x2) {
  return _runSaga.apply(this, arguments);
}

function _runSaga() {
  _runSaga = _asyncToGenerator(function* (saga, lastInput, isError = false) {
    const {
      value,
      done
    } = saga[isError ? 'throw' : 'next'](lastInput);

    if (done) {
      return value;
    }

    if (handlers[value.type]) {
      try {
        const input = yield handlers[value.type](value);
        return runSaga(saga, input, false);
      } catch (e) {
        return runSaga(saga, e, true);
      }
    }

    throw new Error('Unhandled Effect');
  });
  return _runSaga.apply(this, arguments);
}