"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyAuth = verifyAuth;
exports.parseToken = parseToken;
exports.login = login;
exports.projectAuth = projectAuth;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _errors = require("./errors");

var _api = require("./util/api");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function verifyAuth(authToken) {
  if (!authToken) {
    return {
      isValid: false,
      error: 'missing'
    };
  }

  if ((0, _api.isJWT)(authToken)) {
    const authJwt = _jsonwebtoken.default.decode(authToken);

    const now = Date.now() / 1000;

    if (!authJwt || now > authJwt.exp) {
      return {
        isValid: false,
        error: 'invalid'
      };
    }
  }

  return {
    isValid: true,
    error: null
  };
}

function parseToken(_x) {
  return _parseToken.apply(this, arguments);
}

function _parseToken() {
  _parseToken = _asyncToGenerator(function* (res) {
    try {
      const body = yield res.json();

      if (body.token) {
        return body.token;
      }
    } catch (e) {// ignore parsing error
    }

    const cookie = res.headers.get('set-cookie');
    return /s=(.+?);/.exec(cookie)[1];
  });
  return _parseToken.apply(this, arguments);
}

function fetchToken(_x2, _x3, _x4, _x5) {
  return _fetchToken.apply(this, arguments);
}

function _fetchToken() {
  _fetchToken = _asyncToGenerator(function* (method, endpoint, body, headers) {
    const params = {
      method,
      headers: _objectSpread({
        'Content-Type': 'application/json'
      }, headers)
    };

    if (body) {
      params.body = JSON.stringify(body);
    }

    const res = yield (0, _nodeFetch.default)(endpoint, params);

    if (res.ok) {
      return parseToken(res);
    }

    const error = new Error(`${res.statusText}`);
    error.statusCode = res.status;
    throw error;
  });
  return _fetchToken.apply(this, arguments);
}

function login(endpoint, email, password) {
  return fetchToken('POST', `${endpoint}/login`, {
    email,
    password
  });
}

function projectAuth(_x6, _x7, _x8) {
  return _projectAuth.apply(this, arguments);
}

function _projectAuth() {
  _projectAuth = _asyncToGenerator(function* (endpoint, projectId, authToken) {
    try {
      return yield fetchToken('GET', `${endpoint}/project/${projectId}/access-token`, null, (0, _api.getAuthHeader)(authToken));
    } catch (e) {
      (0, _errors.handleHttpErrors)(e, 'getting developer access token');
    }
  });
  return _projectAuth.apply(this, arguments);
}