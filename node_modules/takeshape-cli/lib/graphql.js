"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGraphQLEndpoint = getGraphQLEndpoint;
exports.createConnector = createConnector;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _asyncRetry = _interopRequireDefault(require("async-retry"));

var _api = require("./util/api");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getGraphQLEndpoint(params, projectId) {
  const project = projectId ? `project/${projectId}/` : '';
  return `${params.endpoint}/${project}graphql`;
}

const defaultOptions = {
  retries: 3,
  timeout: 0
};

function createConnector(params, authToken, projectId, options = defaultOptions) {
  const endpoint = getGraphQLEndpoint(params, projectId);
  const authHeader = (0, _api.getAuthHeader)(authToken);
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (params) {
        return (0, _asyncRetry.default)(
        /*#__PURE__*/
        function () {
          var _ref2 = _asyncToGenerator(function* (bail) {
            const res = yield (0, _nodeFetch.default)(endpoint, {
              method: 'POST',
              timeout: options.timeout,
              body: JSON.stringify(params),
              headers: _objectSpread({
                'Content-Type': 'application/json'
              }, authHeader)
            });
            const body = yield res.json();

            if (res.ok) {
              return body;
            }

            const error = new Error(`${res.statusText}: ${body.message}`);
            error.statusCode = res.status;

            if (res.status === 401 || res.status === 403) {
              // bail to stop retrying
              return bail(error);
            }

            throw error;
          });

          return function (_x2) {
            return _ref2.apply(this, arguments);
          };
        }(), {
          retries: options.retries
        });
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}