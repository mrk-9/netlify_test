"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isGlitch = isGlitch;
exports.readDotEnv = readDotEnv;
exports.writeDotEnv = writeDotEnv;
exports.updateEnv = updateEnv;

var _dotenv = _interopRequireDefault(require("dotenv"));

var _dotenvStringify = _interopRequireDefault(require("dotenv-stringify"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function isGlitch() {
  return Boolean(process.env.GLITCH) || Boolean(process.env.PROJECT_REMIX_CHAIN);
}

function getEnvPath() {
  return _path.default.resolve(process.cwd(), '.env');
}

function readDotEnv() {
  return _readDotEnv.apply(this, arguments);
}

function _readDotEnv() {
  _readDotEnv = _asyncToGenerator(function* () {
    const path = getEnvPath();

    if (_fsExtra.default.existsSync(path)) {
      return _dotenv.default.parse((yield _fsExtra.default.readFile(path)));
    }

    return {};
  });
  return _readDotEnv.apply(this, arguments);
}

function writeDotEnv(env) {
  return _fsExtra.default.writeFile(getEnvPath(), (0, _dotenvStringify.default)(env));
}

function updateEnv(_x, _x2) {
  return _updateEnv.apply(this, arguments);
}

function _updateEnv() {
  _updateEnv = _asyncToGenerator(function* (authToken, project, site = {}) {
    const env = yield readDotEnv();
    env.TS_AUTH_TOKEN = authToken;
    env.TS_PROJECT_ID = project.value;
    env.TS_PROJECT_NAME = project.name;
    env.TS_SITE_ID = site.value;
    env.TS_SITE_NAME = site.name;
    yield writeDotEnv(env);
  });
  return _updateEnv.apply(this, arguments);
}