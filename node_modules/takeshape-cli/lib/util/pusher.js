"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleWarning = handleWarning;
exports.handleAction = handleAction;
exports.subscribe = subscribe;

var _api = _interopRequireDefault(require("./api"));

var _pusherClient = _interopRequireDefault(require("pusher-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function handleWarning(type, error) {
  if (type === 'Error' && error.type === 'WebSocketError') {
    console.log('Disconnected from TakeShape. Restart this process to resume live content updates.');
  }
}

_pusherClient.default.warn = handleWarning;

function handleAction(callback) {
  return action => {
    if (action.type === 'content/CONTENT_UPDATED' || action.type === 'content/CONTENT_CREATED' || action.type === 'content/CONTENT_DELETED') {
      callback(action);
    }
  };
}

function subscribe(_x, _x2) {
  return _subscribe.apply(this, arguments);
}

function _subscribe() {
  _subscribe = _asyncToGenerator(function* (params, callback) {
    const config = yield (0, _api.default)(params, 'GET', `/project/${params.projectId}/pusher-client-config`);
    const pusher = new _pusherClient.default(config.key, {
      authEndpoint: `${params.endpoint}/project/channel-auth?auth=${params.authToken}`,
      cluster: config.cluster,
      encrypted: true
    });
    const channel = pusher.subscribe(`presence-project.${params.projectId}`);
    channel.bind('server-action', handleAction(callback));
  });
  return _subscribe.apply(this, arguments);
}