"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectorWithCache = connectorWithCache;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _objectHash = _interopRequireDefault(require("object-hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const cacheDir = '.cache';

function connectorWithCache(connector) {
  const decorated =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(function* (params) {
      const cachePath = _path.default.join(cacheDir, `${(0, _objectHash.default)(params)}.json`);

      if (yield _fsExtra.default.pathExists(cachePath)) {
        return _fsExtra.default.readJSON(cachePath);
      }

      const [result] = yield Promise.all([connector(params), _fsExtra.default.mkdirs(cacheDir)]);
      yield _fsExtra.default.writeJSON(cachePath, result);
      return result;
    });

    return function decorated(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  decorated.clearCache = () => _fsExtra.default.remove(cacheDir);

  return decorated;
}