"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClientSchema = getClientSchema;
exports.default = void 0;

var _graphql = require("graphql");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _oraWrapper = _interopRequireDefault(require("./ora-wrapper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getClientSchema(_x) {
  return _getClientSchema.apply(this, arguments);
}

function _getClientSchema() {
  _getClientSchema = _asyncToGenerator(function* (connector) {
    const res = yield connector({
      query: _graphql.introspectionQuery
    });
    const schema = (0, _graphql.buildClientSchema)(res.data);
    const result = (0, _graphql.printSchema)(schema);
    yield _fsExtra.default.writeFile('tsg-project.graphql', result);
  });
  return _getClientSchema.apply(this, arguments);
}

var _default = (0, _oraWrapper.default)(getClientSchema, 'Getting client schema.', 'Client schema saved as tsg-project.graphql.', 'Failed while getting client schema.');

exports.default = _default;