"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRunner = createRunner;

var _chalk = _interopRequireDefault(require("chalk"));

var _formatError = _interopRequireDefault(require("./format-error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function createRunner(name, task) {
  let running = false;
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (...args) {
        if (!running) {
          running = true;
          const startTime = Date.now();
          console.log(`${name} - Started!`);

          try {
            const stats = yield task(...args);
            const totalSeconds = (Date.now() - startTime) / 1000;
            console.log(`${name} - ` + _chalk.default.green(`Generated ${stats.pagesGenerated} pages in ${totalSeconds}s`));
            const warnings = stats.warnings;

            if (warnings && warnings.length) {
              console.log(`${name} - ` + _chalk.default.yellow('Warnings:'));
              warnings.forEach(warning => {
                console.log(_chalk.default.yellow(`${warning.source}: ${warning.message}`));
              });
            }

            running = false;
          } catch (error) {
            console.log(`${name} - ` + _chalk.default.red(`Error:\n${(0, _formatError.default)(error)}`));
            running = false;
          }
        }
      });

      return function () {
        return _ref.apply(this, arguments);
      };
    }()
  );
}