"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isJWT = isJWT;
exports.getAuthHeader = getAuthHeader;
exports.default = api;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function isValidHeader(str) {
  const json = Buffer.from(str, 'base64').toString('utf8');

  try {
    const header = JSON.parse(json);
    return header.typ === 'JWT';
  } catch (e) {
    return false;
  }
}

function isJWT(str) {
  const parts = str.split('.');
  return parts.length === 3 && isValidHeader(parts[0]);
}

function getAuthHeader(authToken) {
  if (!authToken) {
    return {};
  }

  return isJWT(authToken) ? {
    'X-TakeShape-Token': authToken
  } : {
    Authorization: `Bearer ${authToken}`
  };
}

function api(_x, _x2, _x3, _x4) {
  return _api.apply(this, arguments);
}

function _api() {
  _api = _asyncToGenerator(function* (params, method, path, body) {
    const requestParams = {
      method,
      headers: _objectSpread({}, getAuthHeader(params.authToken), {
        'Content-Type': 'application/json'
      }),
      timeout: 5000
    };

    if (body) {
      requestParams.body = JSON.stringify(body);
    }

    const endpoint = `${params.endpoint}${path}`;
    const res = yield (0, _nodeFetch.default)(endpoint, requestParams);

    if (res.ok) {
      return res.json();
    }

    const error = new Error(`${res.statusText}`);
    error.statusCode = res.status;
    throw error;
  });
  return _api.apply(this, arguments);
}