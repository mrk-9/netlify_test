"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixPrototype = fixPrototype;
exports.formatError = formatError;
exports.default = nunjucksFactory;

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _templateRenderError = _interopRequireDefault(require("./errors/template-render-error"));

var _codeFilter = _interopRequireDefault(require("./filters/code-filter"));

var _createImageFilter = _interopRequireDefault(require("./filters/create-image-filter"));

var _createAssetFilter = _interopRequireDefault(require("./filters/create-asset-filter"));

var _markdownFilter = _interopRequireDefault(require("./filters/markdown-filter"));

var _createNumberFilter = _interopRequireDefault(require("./filters/create-number-filter"));

var _createRouteFilter = _interopRequireDefault(require("./filters/create-route-filter"));

var _createDateFilter = _interopRequireDefault(require("./filters/create-date-filter"));

var _pluralizeFilter = _interopRequireDefault(require("./filters/pluralize-filter"));

var _arrayFilters = require("./filters/array-filters");

var _paths = require("./paths");

var _vmNunjucks = _interopRequireDefault(require("vm-nunjucks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function fixPrototype(obj) {
  // this is a hack because nunjucks doesn't support objects without a prototype
  return JSON.parse(JSON.stringify(obj));
}

function parseLocation(line, templatePath) {
  const groups = /\(([^)]+)\)(?: \[Line (\d+)(?:, Column (\d+))?])?/.exec(line);
  return groups ? {
    file: _path.default.relative(templatePath, groups[1]),
    line: groups[2],
    column: groups[3]
  } : {};
}

function stripMessage(message) {
  return message.replace(/\s*(?:Error:)?\s*/, '');
}

function formatError(error, templatePath) {
  const lines = error.message.split('\n');
  const location = parseLocation(lines[0], templatePath);
  const message = stripMessage(lines[lines.length - 1]);
  return new _templateRenderError.default(message, location);
}

function nunjucksFactory(config, stats) {
  const env = new _vmNunjucks.default.Environment(new _vmNunjucks.default.FileSystemLoader(config.templatePath));
  env.addFilter('date', (0, _createDateFilter.default)(config));
  env.addFilter('route', (0, _createRouteFilter.default)(config, stats));
  env.addFilter('md', _markdownFilter.default);
  const numberFilter = (0, _createNumberFilter.default)(config);
  env.addFilter('numberFormat', numberFilter);
  env.addFilter('number', numberFilter);
  env.addFilter('code', _codeFilter.default);
  env.addFilter('image', (0, _createImageFilter.default)(config.imageBaseUrl, config.imageDefaults));
  env.addFilter('asset', (0, _createAssetFilter.default)(config.assetBaseUrl));
  env.addFilter('intersection', _arrayFilters.intersectionFilter);
  env.addFilter('union', _arrayFilters.unionFilter);
  env.addFilter('pluralize', _pluralizeFilter.default);

  const render = _bluebird.default.promisify(env.render.bind(env));

  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (path, template, context) {
        try {
          stats.pagesGenerated++;
          return {
            path: (0, _paths.permalink)(path),
            contents: yield render(template, fixPrototype(context))
          };
        } catch (e) {
          throw formatError(e, config.templatePath);
        }
      });

      return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}