"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getType = getType;
exports.handleJSON = handleJSON;
exports.handleYaml = handleYaml;
exports.handleGraphQL = handleGraphQL;
exports.handleContextString = handleContextString;
exports.resolveGraphQLConfig = resolveGraphQLConfig;
exports.default = resolveContext;

var _bluebird = _interopRequireDefault(require("bluebird"));

var _forEach = _interopRequireDefault(require("lodash/forEach"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _fs = _interopRequireDefault(require("./fs"));

var _path = _interopRequireDefault(require("path"));

var _graphqlError = _interopRequireDefault(require("./errors/graphql-error"));

var _stats = require("./stats");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getType(path) {
  const matches = /\.(graphql|yml|yaml|json)$/.exec(path);

  if (matches && matches.length) {
    const type = matches[1];
    return type === 'yml' ? 'yaml' : type;
  }

  return null;
}

function handleJSON({
  srcPath,
  filePath
}) {
  return _fs.default.readFileAsync(_path.default.join(srcPath, filePath), 'utf8').then(JSON.parse);
}

function handleYaml({
  srcPath,
  filePath
}) {
  return _fs.default.readFileAsync(_path.default.join(srcPath, filePath), 'utf8').then(_jsYaml.default.safeLoad);
}

function handleGraphQL(_x) {
  return _handleGraphQL.apply(this, arguments);
}

function _handleGraphQL() {
  _handleGraphQL = _asyncToGenerator(function* ({
    srcPath,
    filePath,
    variables,
    connector,
    route,
    stats
  }) {
    const queryPath = _path.default.join(srcPath, filePath);

    const query = yield _fs.default.readFileAsync(queryPath, 'utf8');
    const res = yield connector({
      query,
      variables
    }, {
      stats,
      source: filePath
    });

    if (res.errors) {
      throw new _graphqlError.default(`An error occurred while resolving ${queryPath}`, res.errors);
    }

    if (route && route.path && !route.paginate) {
      (0, _stats.recordContentUsage)(stats, res.data, route.path);
    }

    return res.data;
  });
  return _handleGraphQL.apply(this, arguments);
}

function handleContextString({
  value,
  srcPath,
  connector,
  route,
  stats
}) {
  const type = getType(value);

  if (type === 'json') {
    return handleJSON({
      srcPath,
      filePath: value,
      stats
    });
  }

  if (type === 'yaml') {
    return handleYaml({
      srcPath,
      filePath: value,
      stats
    });
  }

  if (type === 'graphql') {
    return handleGraphQL({
      srcPath,
      filePath: value,
      connector,
      route,
      stats
    });
  }

  return value;
}

function resolveGraphQLConfig(_x2, _x3) {
  return _resolveGraphQLConfig.apply(this, arguments);
}

function _resolveGraphQLConfig() {
  _resolveGraphQLConfig = _asyncToGenerator(function* (config, srcPath) {
    let source;
    let variables;

    if (typeof config === 'string') {
      source = config;
    } else if (typeof config === 'object' && config.query) {
      source = config.query;
      variables = config.variables;
    }

    const filePath = _path.default.join(srcPath, source);

    const query = yield _fs.default.readFileAsync(filePath, 'utf8');
    return {
      source,
      query,
      variables
    };
  });
  return _resolveGraphQLConfig.apply(this, arguments);
}

function isQueryObject(obj) {
  return obj.query && obj.query.endsWith('.graphql');
}

function handleValue(contextParams) {
  const {
    contextConfig
  } = contextParams,
        rest = _objectWithoutProperties(contextParams, ["contextConfig"]);

  if (typeof contextConfig === 'string') {
    return handleContextString(_objectSpread({}, rest, {
      value: contextConfig
    }));
  }

  if (typeof contextConfig === 'object') {
    if (isQueryObject(contextConfig)) {
      return handleGraphQL(_objectSpread({}, rest, {
        filePath: contextConfig.query,
        variables: contextConfig.variables
      }));
    }

    const context = {};
    (0, _forEach.default)(contextConfig, (value, key) => {
      context[key] = handleValue(_objectSpread({}, rest, {
        contextConfig: value
      }));
    });
    return _bluebird.default.props(context);
  }

  return contextConfig;
}

function resolveContext(_x4) {
  return _resolveContext.apply(this, arguments);
}

function _resolveContext() {
  _resolveContext = _asyncToGenerator(function* (contextParams) {
    const context = yield handleValue(contextParams);
    return typeof context === 'object' ? context : {};
  });
  return _resolveContext.apply(this, arguments);
}