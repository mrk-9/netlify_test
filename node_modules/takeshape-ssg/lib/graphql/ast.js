"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createArgument = createArgument;
exports.createVariableDefinition = createVariableDefinition;
exports.createSelectionSet = createSelectionSet;
exports.createField = createField;
exports.findQuery = findQuery;
exports.addQueryVariables = addQueryVariables;
exports.wrapSelectionSet = wrapSelectionSet;
exports.wrapQuery = wrapQuery;

function createArgument({
  name,
  value
}) {
  return {
    kind: 'Argument',
    name: {
      kind: 'Name',
      value: name
    },
    value: {
      kind: 'Variable',
      name: {
        kind: 'Name',
        value
      }
    }
  };
}

function createVariableDefinition({
  name,
  type
}) {
  return {
    kind: 'VariableDefinition',
    variable: {
      kind: 'Variable',
      name: {
        kind: 'Name',
        value: name
      }
    },
    type: {
      kind: 'NamedType',
      name: {
        kind: 'Name',
        value: type
      }
    }
  };
}

function createSelectionSet(selections) {
  return {
    kind: 'SelectionSet',
    selections
  };
}

function createField(name) {
  return {
    kind: 'Field',
    name: {
      kind: 'Name',
      value: name
    },
    arguments: [],
    directives: []
  };
}

function findQuery(ast) {
  return ast.definitions.find(definition => definition.operation === 'query');
}

function addQueryVariables(variables, ast) {
  const query = findQuery(ast);
  const variableNames = new Set(variables.map(variable => variable.name));
  query.variableDefinitions = query.variableDefinitions.filter(def => !variableNames.has(def.variable.name.value)).concat(variables.map(createVariableDefinition));
  return ast;
}

function wrapSelectionSet(selectionSet, name, args = []) {
  return {
    kind: 'SelectionSet',
    selections: [{
      kind: 'Field',
      name: {
        kind: 'Name',
        value: name
      },
      arguments: args,
      directives: [],
      selectionSet
    }]
  };
}

function wrapQuery(name, args, ast) {
  const query = findQuery(ast);
  const argsAst = args.map(createArgument);
  query.selectionSet = wrapSelectionSet(query.selectionSet, name, argsAst);
  return ast;
}