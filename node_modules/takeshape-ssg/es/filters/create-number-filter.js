function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { formatLocale } from 'd3-format';
import arAE from 'd3-format/locale/ar-AE.json';
import arBH from 'd3-format/locale/ar-BH.json';
import arDJ from 'd3-format/locale/ar-DJ.json';
import arDZ from 'd3-format/locale/ar-DZ.json';
import arEG from 'd3-format/locale/ar-EG.json';
import arEH from 'd3-format/locale/ar-EH.json';
import arER from 'd3-format/locale/ar-ER.json';
import arIL from 'd3-format/locale/ar-IL.json';
import arIQ from 'd3-format/locale/ar-IQ.json';
import arJO from 'd3-format/locale/ar-JO.json';
import arKM from 'd3-format/locale/ar-KM.json';
import arKW from 'd3-format/locale/ar-KW.json';
import arLB from 'd3-format/locale/ar-LB.json';
import arLY from 'd3-format/locale/ar-LY.json';
import arMA from 'd3-format/locale/ar-MA.json';
import arMR from 'd3-format/locale/ar-MR.json';
import arOM from 'd3-format/locale/ar-OM.json';
import arPS from 'd3-format/locale/ar-PS.json';
import arQA from 'd3-format/locale/ar-QA.json';
import arSA from 'd3-format/locale/ar-SA.json';
import arSD from 'd3-format/locale/ar-SD.json';
import arSO from 'd3-format/locale/ar-SO.json';
import arSS from 'd3-format/locale/ar-SS.json';
import arSY from 'd3-format/locale/ar-SY.json';
import arTD from 'd3-format/locale/ar-TD.json';
import arTN from 'd3-format/locale/ar-TN.json';
import arYE from 'd3-format/locale/ar-YE.json';
import caES from 'd3-format/locale/ca-ES.json';
import csCZ from 'd3-format/locale/cs-CZ.json';
import deCH from 'd3-format/locale/de-CH.json';
import deDE from 'd3-format/locale/de-DE.json';
import enCA from 'd3-format/locale/en-CA.json';
import enGB from 'd3-format/locale/en-GB.json';
import enIN from 'd3-format/locale/en-IN.json';
import enUS from 'd3-format/locale/en-US.json';
import esES from 'd3-format/locale/es-ES.json';
import esMX from 'd3-format/locale/es-MX.json';
import fiFI from 'd3-format/locale/fi-FI.json';
import frCA from 'd3-format/locale/fr-CA.json';
import frFR from 'd3-format/locale/fr-FR.json';
import heIL from 'd3-format/locale/he-IL.json';
import huHU from 'd3-format/locale/hu-HU.json';
import itIT from 'd3-format/locale/it-IT.json';
import jaJP from 'd3-format/locale/ja-JP.json';
import koKR from 'd3-format/locale/ko-KR.json';
import mkMK from 'd3-format/locale/mk-MK.json';
import nlNL from 'd3-format/locale/nl-NL.json';
import plPL from 'd3-format/locale/pl-PL.json';
import ptBR from 'd3-format/locale/pt-BR.json';
import ruRU from 'd3-format/locale/ru-RU.json';
import svSE from 'd3-format/locale/sv-SE.json';
import ukUA from 'd3-format/locale/uk-UA.json';
import zhCN from 'd3-format/locale/zh-CN.json';
const locales = {
  'ar-ae': arAE,
  'ar-bh': arBH,
  'ar-dj': arDJ,
  'ar-dz': arDZ,
  'ar-eg': arEG,
  'ar-eh': arEH,
  'ar-er': arER,
  'ar-il': arIL,
  'ar-iq': arIQ,
  'ar-jo': arJO,
  'ar-km': arKM,
  'ar-kw': arKW,
  'ar-lb': arLB,
  'ar-ly': arLY,
  'ar-ma': arMA,
  'ar-mr': arMR,
  'ar-om': arOM,
  'ar-ps': arPS,
  'ar-qa': arQA,
  'ar-sa': arSA,
  'ar-sd': arSD,
  'ar-so': arSO,
  'ar-ss': arSS,
  'ar-sy': arSY,
  'ar-td': arTD,
  'ar-tn': arTN,
  'ar-ye': arYE,
  'ca-es': caES,
  'cs-cz': csCZ,
  'de-ch': deCH,
  'de-de': deDE,
  'en-ca': enCA,
  'en-gb': enGB,
  'en-in': enIN,
  'en-us': enUS,
  'es-es': esES,
  'es-mx': esMX,
  'fi-fi': fiFI,
  'fr-ca': frCA,
  'fr-fr': frFR,
  'he-il': heIL,
  'hu-hu': huHU,
  'it-it': itIT,
  'ja-jp': jaJP,
  'ko-kr': koKR,
  'mk-mk': mkMK,
  'nl-nl': nlNL,
  'pl-pl': plPL,
  'pt-br': ptBR,
  'ru-ru': ruRU,
  'sv-se': svSE,
  'uk-ua': ukUA,
  'zh-cn': zhCN
};
export default function createNumberFilter({
  numbers,
  locale
}) {
  return (value, formatStr, config) => {
    const localeSettings = _objectSpread({}, locales[locale.toLowerCase()] || enUS, numbers && numbers.config, config);

    const format = formatStr ? formatStr : numbers && numbers.format ? numbers.format : ',';
    return formatLocale(localeSettings).format(format)(value);
  };
}