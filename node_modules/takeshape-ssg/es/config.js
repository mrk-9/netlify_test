function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import yaml from 'js-yaml';
import fs from 'fs';
import path from 'path';
import jv from 'json-variables';
export function prepareConfig(configFilePath, config, envConfig = {}) {
  const cwd = path.dirname(configFilePath);

  const combined = _objectSpread({
    env: {},
    context: {},
    routes: {},
    imageBaseUrl: 'https://images.takeshape.io',
    assetBaseUrl: 'https://assets.takeshape.io',
    imageDefaults: {
      auto: 'compress,format'
    },
    locale: 'en-us',
    pathPrefix: ''
  }, config, {
    configFilePath,
    cwd,
    templatePath: path.join(cwd, config.templatePath || 'templates'),
    buildPath: path.join(cwd, config.buildPath || 'build'),
    staticPath: path.join(cwd, config.staticPath || 'static'),
    dates: _objectSpread({
      tz: 'America/New_York',
      format: 'LLL'
    }, config.dates),
    usageStats: false
  }, envConfig);

  return jv(combined, {
    heads: '${',
    tails: '}'
  });
}
export function loadConfig(configFilePath, envConfig) {
  try {
    const config = yaml.load(fs.readFileSync(configFilePath, 'utf8'));
    return prepareConfig(configFilePath, config, envConfig);
  } catch (e) {
    throw new Error(`Failed to load tsg config from ${configFilePath}`);
  }
}