function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import BbPromise from 'bluebird';
import path from 'path';
import TemplateRenderError from './errors/template-render-error';
import codeFilter from './filters/code-filter';
import createImageFilter from './filters/create-image-filter';
import createAssetFilter from './filters/create-asset-filter';
import markdownFilter from './filters/markdown-filter';
import createNumberFilter from './filters/create-number-filter';
import createRouteFilter from './filters/create-route-filter';
import createDateFilter from './filters/create-date-filter';
import pluralizeFilter from './filters/pluralize-filter';
import { intersectionFilter, unionFilter } from './filters/array-filters';
import { permalink } from './paths';
import nunjucks from 'vm-nunjucks';
export function fixPrototype(obj) {
  // this is a hack because nunjucks doesn't support objects without a prototype
  return JSON.parse(JSON.stringify(obj));
}

function parseLocation(line, templatePath) {
  const groups = /\(([^)]+)\)(?: \[Line (\d+)(?:, Column (\d+))?])?/.exec(line);
  return groups ? {
    file: path.relative(templatePath, groups[1]),
    line: groups[2],
    column: groups[3]
  } : {};
}

function stripMessage(message) {
  return message.replace(/\s*(?:Error:)?\s*/, '');
}

export function formatError(error, templatePath) {
  const lines = error.message.split('\n');
  const location = parseLocation(lines[0], templatePath);
  const message = stripMessage(lines[lines.length - 1]);
  return new TemplateRenderError(message, location);
}
export default function nunjucksFactory(config, stats) {
  const env = new nunjucks.Environment(new nunjucks.FileSystemLoader(config.templatePath));
  env.addFilter('date', createDateFilter(config));
  env.addFilter('route', createRouteFilter(config, stats));
  env.addFilter('md', markdownFilter);
  const numberFilter = createNumberFilter(config);
  env.addFilter('numberFormat', numberFilter);
  env.addFilter('number', numberFilter);
  env.addFilter('code', codeFilter);
  env.addFilter('image', createImageFilter(config.imageBaseUrl, config.imageDefaults));
  env.addFilter('asset', createAssetFilter(config.assetBaseUrl));
  env.addFilter('intersection', intersectionFilter);
  env.addFilter('union', unionFilter);
  env.addFilter('pluralize', pluralizeFilter);
  const render = BbPromise.promisify(env.render.bind(env));
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (path, template, context) {
        try {
          stats.pagesGenerated++;
          return {
            path: permalink(path),
            contents: yield render(template, fixPrototype(context))
          };
        } catch (e) {
          throw formatError(e, config.templatePath);
        }
      });

      return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}