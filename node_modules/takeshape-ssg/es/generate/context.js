function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { formatPath } from 'takeshape-routing';
export function combineContext(route, config) {
  return _objectSpread({}, config.context, route.context, {
    global: config.context,
    env: config.env,
    environmentVariables: config.env,
    // DEPRECATE NEXT MAJOR VERSION
    currentPath: route.path
  });
}
export function getListPageContext(items, pageNumber, routeContext) {
  const {
    route,
    context,
    totalPages
  } = routeContext;
  const {
    paginate
  } = route;
  let currentPath;

  if (paginate.firstPage && pageNumber === 1) {
    currentPath = paginate.firstPage;
  } else {
    currentPath = formatPath(paginate.path, {
      num: pageNumber
    }).path;
  }

  const pageContext = {
    currentPath,
    items,
    pagination: {
      currentPage: pageNumber,
      totalPages
    }
  };
  return _objectSpread({}, context, pageContext);
}
export function getItemContext(route, context, {
  current,
  previous,
  next
}) {
  const itemContext = {
    item: current.item,
    currentPath: current.path
  };

  if (route.paginate && route.paginate.itemName) {
    itemContext[route.paginate.itemName] = current.item;
  }

  if (previous) {
    itemContext.previousItem = previous.item;
    itemContext.previousPath = previous.path;
  }

  if (next) {
    itemContext.nextItem = next.item;
    itemContext.nextPath = next.path;
  }

  return _objectSpread({}, context, itemContext);
}