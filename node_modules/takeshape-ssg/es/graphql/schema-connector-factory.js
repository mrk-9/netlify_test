function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import fs from '../fs';
import fetch from 'node-fetch';
import path from 'path';
import { graphql } from 'graphql';
import { connectorWithMigrations } from './migrate';
export function getRemoteConnector(config) {
  return params => {
    return fetch(config.url, {
      method: 'POST',
      body: JSON.stringify(params),
      headers: _objectSpread({
        'Content-Type': 'application/json'
      }, config.headers || {})
    }).then(res => {
      if (res.ok) {
        return res.json();
      }

      return res.text().then(text => {
        throw new Error(`${res.statusText}: ${text}`);
      });
    });
  };
}

function parseConfigJson(json) {
  if (json.request) {
    return _objectSpread({
      type: 'request'
    }, json.request);
  }

  if (json['graphql-js']) {
    return {
      type: 'graphql-js',
      file: json['graphql-js']
    };
  }

  return null;
}

function readConfigFile(path) {
  let json;

  try {
    json = JSON.parse(fs.readFileSync(`${path}/.graphqlrc`, 'utf-8'));
  } catch (e) {
    throw new Error(`An error occurred loading .graphqlrc.`);
  }

  const config = parseConfigJson(json);

  if (config) {
    return config;
  }

  throw new Error(`Invalid configuration file: ${JSON.stringify(json)}`);
}

export function schemaConnectorFactory(cwd, config) {
  config = config || readConfigFile(cwd);
  let connector;

  if (config.type === 'graphql-js') {
    const schema = require(path.join(cwd, config.file)); // eslint-disable-line


    connector = params => graphql(schema, params.query, null, {}, params.variables);
  }

  if (config.type === 'request') {
    connector = getRemoteConnector(config);
  }

  if (connector) {
    return connectorWithMigrations(connector);
  }

  throw new Error('Could not create GraphQL connector - invalid configuration');
}